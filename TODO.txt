Scalabrad TODOs:

Manager
- define standard named messages
  - context expired (use this instead of notify on context expiration methods)
  - client connected/disconnected (analogous to server connected/disconnected)
- use messages internally to communicate between proxies as well as connected clients/servers
  - proxies keep track of contexts, for example, so they need to intercept context expiration messages
- allow tracing requests through the system (e.g. zipkin integration)

Server
- settings
  - handle accepted type annotations for any type (not just double)
  - allow settings on server object (not only context-dependent)
  - allow for (require?) asynchronous setting handler dispatch
- when an error happens inside a setting, include info in the returned message (which setting, etc.)
- message handlers (per context or global)
  - allow message handlers to be created declaratively, using annotations to set dispatch policy, etc.
  - unpack messages sent to message handlers, just like settings
- handle context expiration messages

Deployment
- how to deploy Scalabrad to developers (just grab a jar, but what about sbt or maven?)
- how to deploy apps for desktop (just double-click a jar)
- how to deploy apps with jnlp

Client
- clear the server/setting cache when a server disconnects

grammars
- types
  - have a way to indicate non-empty data
  - have a way to indicate any units in patterns (separate from no units)
- stringified data
  - improve parser to handle large data (esp. long strings)

Data
- use akka ByteString? netty buffer?

General
- try to write things as interfaces, rather than concrete types.

web
- registry
  - enable monitoring of changes made by other clients (update live)
  - allow editing existing registry keys
  - allow copying of keys/dirs
  - add confirmation when deleting non-empty directories
  - don't reload entire registry listing on each change
- configure labrad (port, password, registry location) if running on localhost
- nodes
  - allow starting/stopping servers
  - allow configuring nodes
- typescipt? dart?
- ip whitelist/blacklist (if still used)
- error log (logging in general...)

Examples
- write some example clients and servers
